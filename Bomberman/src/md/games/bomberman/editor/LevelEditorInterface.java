/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package md.games.bomberman.editor;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.geom.AffineTransform;
import java.io.IOException;
import javax.swing.JFrame;
import javax.swing.UIManager;
import md.games.bomberman.font.DefaultFont;
import md.games.bomberman.geom.Vector2;
import md.games.bomberman.scenario.Camera;
import md.games.bomberman.scenario.Scenario;
import md.games.bomberman.scenario.ScenarioManager;
import md.games.bomberman.scenario.Tile;

/**
 *
 * @author Asus
 */
public class LevelEditorInterface extends JFrame
{
    private ScenarioManager scenarioManager;
    private ScriptEditor scriptEditor;
    private final DragManager dragger = new DragManager();
    private boolean controlPressed;
    
    public LevelEditorInterface()
    {
        initComponents();
        focus();
        
        startMainThread();
    }
    
    private void focus()
    {
        java.awt.Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        java.awt.Dimension window = getSize();
        setLocation((screen.width - window.width) / 2,
                        (screen.height - window.height) / 2);
    }
    
    private void draw(Graphics g)
    {
        Graphics2D g2 = (Graphics2D) g;
        if(scenarioManager == null)
            return;
        Scenario scenario = scenarioManager.getScenario();
        if(scenario == null)
            return;
        int w = canvas.getWidth();
        int h = canvas.getHeight();
        scenarioManager.draw(g2);
        //bubbles.draw(g,0,0,w,h);
        drawMouseTilePosition(g2);
        glowPointeredTile(g2);
    }
    
    private void drawMouseTilePosition(Graphics2D g)
    {
        MousePosition pos = computeMousePosition();
        if(pos.isOutOfRange())
            return;
        Scenario scenario = scenarioManager.getScenario();
        Tile tile = scenario.getTileManager().getTileByPosition(pos.getPositionInScenario(scenario));
        if(tile == null)
            return;
        
        DefaultFont font = new DefaultFont(Color.BLACK,12);
        int x = canvas.getX() + canvas.getWidth() - 16;
        int y = canvas.getY() + canvas.getHeight() - 16;
        font.printFinal(g,"[row: " + tile.getRow() + ", column: " + tile.getColumn() + "]",x,y);
    }
    
    private void glowPointeredTile(Graphics2D g)
    {
        MousePosition pos = computeMousePosition();
        if(pos.isOutOfRange())
            return;
        Scenario scenario = scenarioManager.getScenario();
        Tile tile = scenario.getTileManager().getTileByPosition(pos.getPositionInScenario(scenario));
        if(tile == null)
            return;
        
        Vector2 position = tile.getPosition();
        Vector2 size = scenario.getTileManager().getTileSize();
        AffineTransform oldTransform = g.getTransform();
        g.setTransform(scenario.getCamera().getAffineTransform());
        g.setColor(new Color(0f,1f,1f,0.2f));
        g.fillRect((int)position.x + 1,(int)position.y + 1,(int)size.x,(int)size.y);
        g.setTransform(oldTransform);
    }
    
    private void mainThread()
    {
        while(true)
        {
            if(scenarioManager != null && scriptEditor == null)
            {
                if(dragger.isDragging())
                    dragger.updateCamera(scenarioManager.getScenario(),computeMousePosition());
                canvas.paintImmediately(0,0,canvas.getWidth(),canvas.getHeight());
            }
            sleep(SLEEP_TIME,SLEEP_TIME_NANOS);
        }
    }
    
    public final MousePosition computeMousePosition()
    {
        //if(scenarioManager != null)
            //return MousePosition.get(canvas,scenarioManager.getScenario().getCamera());
        return MousePosition.get(canvas);
    }
    
    private static final long SLEEP_TIME = (long) (1d / 60d * 1000d);
    private static final int SLEEP_TIME_NANOS = (int) (((1f / 60f * 1000f) - 16f) * 1000000f);
    private void startMainThread()
    {
        new Thread(this::mainThread).start();
    }
    
    private static void sleep(long millis, int nanos)
    {
        try { Thread.sleep(millis,nanos); }
        catch(InterruptedException ex) {}
    }
    
    public final void closeScriptEditor()
    {
        if(scriptEditor == null)
            return;
        scriptEditor.dispose();
        scriptEditor = null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        canvas = new javax.swing.JPanel()
        {
            @Override
            public final void paint(Graphics g)
            {
                super.paint(g);
                draw(g);
            }
        };
        jPanel2 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        jSplitPane1.setDividerLocation(512);
        jSplitPane1.setResizeWeight(1.0);
        jSplitPane1.setContinuousLayout(true);

        canvas.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                canvasMouseWheelMoved(evt);
            }
        });
        canvas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                canvasMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                canvasMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout canvasLayout = new javax.swing.GroupLayout(canvas);
        canvas.setLayout(canvasLayout);
        canvasLayout.setHorizontalGroup(
            canvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 511, Short.MAX_VALUE)
        );
        canvasLayout.setVerticalGroup(
            canvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 457, Short.MAX_VALUE)
        );

        jSplitPane1.setLeftComponent(canvas);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 222, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 457, Short.MAX_VALUE)
        );

        jSplitPane1.setRightComponent(jPanel2);

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        if(scenarioManager != null)
        {
            Scenario scenario = scenarioManager.getScenario();
            if(scenario != null)
            {
                Camera cam = scenario.getCamera();
                cam.setCustomViewport(canvas.getWidth(),canvas.getHeight());
            }
        }
    }//GEN-LAST:event_formComponentResized

    private void canvasMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasMousePressed
        int ibutton = evt.getButton();
        
        switch(ibutton)
        {
            case MouseEvent.BUTTON1: {
                if(scenarioManager != null && !dragger.isDragging() && controlPressed)
                    dragger.start(scenarioManager.getScenario(),computeMousePosition());
            } break;
            case MouseEvent.BUTTON2: {
                if(scenarioManager != null && !dragger.isDragging())
                    dragger.start(scenarioManager.getScenario(),computeMousePosition());
            } break;
        }
    }//GEN-LAST:event_canvasMousePressed

    private void canvasMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasMouseReleased
        int ibutton = evt.getButton();
        
        switch(ibutton)
        {
            case MouseEvent.BUTTON1: {
                if(scenarioManager != null && dragger.isDragging())
                    dragger.stop();
            } break;
            case MouseEvent.BUTTON2: {
                if(scenarioManager != null && dragger.isDragging())
                    dragger.stop();
            } break;
        }
    }//GEN-LAST:event_canvasMouseReleased

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        int code = evt.getKeyCode();
        
        controlPressed = code == KeyEvent.VK_CONTROL ? true : controlPressed;
    }//GEN-LAST:event_formKeyPressed

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        int code = evt.getKeyCode();
        
        controlPressed = code == KeyEvent.VK_CONTROL ? false : controlPressed;
    }//GEN-LAST:event_formKeyReleased

    private void canvasMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_canvasMouseWheelMoved
        int units = evt.getWheelRotation();
        
        if(scenarioManager != null)
        {
            Camera cam = scenarioManager.getScenario().getCamera();
            cam.translateZ(0.1 * units);
        }
    }//GEN-LAST:event_canvasMouseWheelMoved

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LevelEditorInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            LevelEditorInterface lei = new LevelEditorInterface();
            
            lei.scenarioManager = new ScenarioManager();
            lei.scenarioManager.createDebugScenario(20,20);
            try { lei.scenarioManager.loadTheme("basic_theme"); }
            catch(IOException ex)
            {
                ex.printStackTrace(System.err);
                return;
            }
            lei.scenarioManager.getScenario().getTileManager().setEnabledDrawGrid(true);
            Camera cam = lei.scenarioManager.getScenario().getCamera();
            cam.setCustomViewport(lei.canvas.getWidth(),lei.canvas.getHeight());
            cam.setPosition(lei.canvas.getWidth()/2,lei.canvas.getHeight()/2);
            
            lei.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel canvas;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSplitPane jSplitPane1;
    // End of variables declaration//GEN-END:variables
}
